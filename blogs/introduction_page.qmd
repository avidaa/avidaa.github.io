---
title: "Introduction to differential equations and their application in generative AI"
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: false
    self-contained: false
    code-fold: true
    highlight-style: github
    theme: cosmo
execute:
  echo: false
  warning: false
  message: false
  freeze: auto
  fig-format: png
  fig-dpi: 300
  fig-width: 8
  fig-height: 6
  matplotlib: inline
jupyter: python3
---

# What is a differential equation?

Differential equation is a mathematical equation that **relates a function to its derivative**.

::: {.fragment}
What does a **derivative of a function** tell us?
:::

::: {.fragment}
- It tells us the **rate of change** of the function.
:::

::: {.fragment}
Example:
:::

::: {.fragment}
- A function $f$ represents some quantity of interest, e.g., temperature, cell count or concentration of a drug.
:::

::: {.fragment}
- The derivative of $f$ represents the rate of change of that quantity. That is, **how fast a temperature is rising or how fast a population is growing**.
:::

## What are the types of differential equations?

 - Ordinary Differential Equations (ODEs)
 - Stochastic Differential Equations (SDEs)
 - Partial Differential Equations (PDEs)

### ODEs
- ODEs involve **functions of a single variable** and **their derivatives** (such as time or space).
- For example, consider a process where a variable $x$ changes over time:
$$ \frac{dx(t)}{dt} = f(x(t), t, \theta)$$

  - This equation means that a small change in $x$ (denoted $dx$) over a small time interval $dt$ is determined by a function $f(x(t), t, \theta)$.
  - The function $f$, parameterised by $\theta$, depends on the current value of $x(t)$ and the current time $t$.
  - If we know the starting value of $x$ at time $t_0$, we can use this equation repeatedly to calculate the value of $x$ at later times, such as $x(t_1)$.
  $$x(t_1) = x(t_0) + \int_{t_0}^{t_1} f(x(t), t, \theta) dt$$

#### ODE Solvers

Sometimes <font color="green">we can analytically integrate</font> $\int_{t_0}^{t_1} f(x(t), t, \theta)dt$ term. 

For example:

Let's solve the initial value problem:

$$
\frac{dx}{dt} = 4t^3 + 2t;\quad x(0) = 0;\quad {Find } x(2)
$$

Solution:

\begin{aligned}
x(2) &= x(0) + \textcolor{green}{\int_0^2 (4t^3 + 2t)\, dt} \\
     &= 0 + \int_0^2 4t^3\, dt + \int_0^2 2t\, dt \\
     &= 0 + \int_0^2 4t^3\, dt + \int_0^2 2t\, dt \\
     &= 4 \left[\frac{t^4}{4}\right]_0^2 + 2 \left[\frac{t^2}{2}\right]_0^2 \\
     &= \left[t^4\right]_0^2 + \left[t^2\right]_0^2 \\
     &= (16 - 0) + (4 - 0) \\
     &= \boxed{20}
\end{aligned}

But, in some cases <font color="red">we can not analytically integrate</font> $\int_{t_0}^{t_1} f(x(t), t, \theta) dt$ term. 

For example:

$$
\frac{dx}{dt} = \cos(t^2);\quad x(0) = 0;\quad \text{Find } x(2)
$$

\begin{aligned}
x(2) &= x(0) + \textcolor{red}{\int_0^2 \cos(t^2)\, dt}
\end{aligned}

But, the $\int \cos(t^2) dt$ does not have a closed-form solution.

In cases where the $\int_{t_0}^{t_1} f(x(t), t, \theta) dt$ cannot be solved analytically, we can use approximation methods to estimate the integral, such as:

- Euler method
- Runge-Kutta mathods

### SDEs

- SDEs extend ODEs by incorporating randomness into the dynamics.
- The ODE equation can be written as:
$$
dx(t) = f(x(t), t, \theta)dt
$$
- SDE adds a second term to this equation to introduces randomness:
$$
dx(t) = f(x(t), t, \theta)dt + g(x(t), t, \theta) dW(t)
$$
    - In this equation $$


### PDEs
Partial Differential Equations (PDEs):

- Involve functions of **multiple variables** and their partial derivatives (e.g. space and time)


# How are differential equations used in generative AI?

## Modelling the dynamics of data

That is a **continuous transformation** between simple distributions e.g. Guassian to a complex data distribution, e.g. image or RNA structure.

![](media/videos/gaussian_to_complex/480p15/GaussianToMoon.mp4){fig-align="center"}


## Diffusion models

## Flow Matching models

## Common Types of Generative AI Models
- Generative Adversarial Networks (GANs)

## Bibliography
1. [Continuous Normalizing Flows. Vikram Voleti.](https://voletiv.github.io/docs/presentations/20200901_Mila_CNF_Vikram_Voleti.pdf) 